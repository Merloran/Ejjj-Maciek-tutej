#include "SFML/Graphics.hpp"
#include <time.h>
#include <stdlib.h>
#include <windows.h>
#include <iostream>

int main()
{
    /*
    sf::Clock zegar;
    sf::Time czas = zegar.getElapsedTime();
    sf::Time reset = zegar.restart();
    sf::Time sek = sf::seconds(0.1);
    int predkosc = -1 * sek.asSeconds(), predkoscs = -0.5;
    */
    bool sync =true;
	sf::RenderWindow window(sf::VideoMode(600, 600), "SFML WORK!");
    window.setFramerateLimit(60);
    window.setVerticalSyncEnabled(sync);
    sf::View view(sf::FloatRect(0, 0, 600, 600));

	sf::Texture obraz;

	if (!obraz.loadFromFile("Obrazek.jpg"))
	{
		// handle error
	}


	sf::Texture obraz1;

	if (!obraz1.loadFromFile("Obrazek1.jpg"))
	{
		// handle error
	}

	sf::Texture obraz2;

	if (!obraz2.loadFromFile("Obrazek2.jpg"))
	{
		// handle error
	}

	sf::Texture obraz3;

	if (!obraz3.loadFromFile("Obrazek3.jpg"))
	{
		// handle error
	}
    sf::Texture obraz4;

	if (!obraz4.loadFromFile("Obrazek4.jpg"))
	{
		// handle error
	}

	sf::Sprite zdj;
	zdj.setTexture(obraz1);
	zdj.setPosition(100,550);

	sf::Sprite zdj2;
	zdj2.setTexture(obraz);
	int x =300, y = 400;


	sf::Sprite zdj3;
	zdj3.setTexture(obraz2);
	zdj3.setPosition(100,200);

	sf::Sprite zdj4;
	zdj4.setTexture(obraz2);
	zdj4.setPosition(400,200);

	sf::Sprite zdj5;
	zdj5.setTexture(obraz3);

	sf::Sprite zdj6;
	zdj6.setTexture(obraz1);
	zdj6.setPosition(310,550);

	sf::Sprite zdj7;
	zdj7.setTexture(obraz1);
	zdj7.setPosition(-110,550);

	sf::Sprite zdj8;
	zdj8.setTexture(obraz4);
	zdj8.setPosition(100, 100);

	while (window.isOpen())
	{
        window.setView(view);
		sf::Event event;

		while (window.pollEvent(event))
		{
            switch (event.type)
			{
			case sf::Event::Closed:
				window.close();

				break;

			}
		}
        zdj2.setPosition(x, y);
		if (zdj.getGlobalBounds().intersects(zdj2.getGlobalBounds()) || zdj3.getGlobalBounds().intersects(zdj2.getGlobalBounds()) || zdj4.getGlobalBounds().intersects(zdj2.getGlobalBounds()) || zdj6.getGlobalBounds().intersects(zdj2.getGlobalBounds()) || zdj7.getGlobalBounds().intersects(zdj2.getGlobalBounds()))
		{
			//std::cout << "doszlo do kolizji" << std::endl;
            view.setCenter(x, y);
            zdj5.setPosition(x - 310, y - 310);
		}
		else
		{
			//zdj2.move(sf::Vector2f(0, +0.1));
			y+=4;
            view.setCenter(x, y);
            zdj5.setPosition(x - 310, y - 310);
		}
		/*
		if(event.type == sf::Event::KeyPressed && event.key.code == sf::Keyboard::Left)
                zdj2.move(sf::Vector2f(-0.2, 0));
        if(event.type == sf::Event::KeyPressed && event.key.code == sf::Keyboard::Right)        //inny sposob poruszania sie problem z game over :/
                zdj2.move(sf::Vector2f(+0.2, 0));
        if(event.type == sf::Event::KeyPressed && event.key.code == sf::Keyboard::Up)
                zdj2.move(sf::Vector2f(0, -0.2));
        */

        if(sf::Keyboard::isKeyPressed(sf::Keyboard::Left))
        {
                x-=3;
        }
        if(sf::Keyboard::isKeyPressed(sf::Keyboard::Right))
        {
                x+=3;
        }
        if(sf::Keyboard::isKeyPressed(sf::Keyboard::Up))
        {
            y-=13;
        }

            if(y >= 600)
            {
                window.close();
                std::cout << "GAME OVER!";
            }

		window.clear();

		window.draw(zdj5);
		window.draw(zdj);
		window.draw(zdj2);
		window.draw(zdj3);
		window.draw(zdj4);
		window.draw(zdj6);
		window.draw(zdj7);
if (zdj3.getGlobalBounds().intersects(zdj2.getGlobalBounds()))
        {
            window.draw(zdj8);
        }
		window.display();
	}
}
